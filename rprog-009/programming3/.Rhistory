install.packages("KernSmooth")
library(KernSmooth)
install.packages('swirl')
library(swirl)
swirl()
swirl()
swirl
library(swirl)
swirl()
5+7
x<-5_7
x<-5+7
x
y<-x-3
y
z=c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
a<-c(z,555,z)
c(z,555,z)
z*2+100
my_sqrt=sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(c(1,2,3,4),c(0,10))
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
c(0,5,55,-10,6)
num_vect<-c(0,5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-(num_vect<1)
tf<- num_vect<1
tf
num_vect>=6
my_char<-c('My','name','is')
my_char
paste(my_char,collapse = " ")
my_name<-c(my_char,'wujohn1990')
my_name
paste(my_name,collapse = " ")
pastr("Hello","world!",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("x",'y','z'),sep="")
paste(1:3,c("x","y","z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
install.packages("data")
library(dataset)
library(datasets)
data(iris)
head(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
data(mtcars)
?mtcars
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
x=with(mtcars, tapply(mpg, cyl, mean))
x[1]-x[8]
x[1]-x[3]
library(swirl)
swril()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,
| class, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
setwd("~/GitRepo/coursera_courses/rprog-009/programming3")
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
head(data$State)
uniqe(data$State)
uniq(data$State)
unique(data$State)
outcome = 'heart attack'
names(data) <- tolower(names(data))
valid_outcomes <- c('heart attack','heart failure','pneumonia')
if (!(outcome %in% valid_outcomes)) {stop('invalid outcome')}
column <- paste('hospital.30.day.death..mortality..rates.from.',gsub('[ ]','.',outcome),sep='')
data <- data[ ,c('hospital.name',column) ]
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
names(data) <- tolower(names(data))
valid_outcomes <- c('heart attack','heart failure','pneumonia')
# check if arguments are valid
if (!(outcome %in% valid_outcomes)) {stop('invalid outcome')}
# outcome character to match data's column names
column <- paste('hospital.30.day.death..mortality..rates.from.',gsub('[ ]','.',outcome),sep='')
data <- data[ ,c('state','hospital.name',column) ]
# order by state, hospital name
data <- data[order(data$state,data$hospital.name),]
head(data)
s=split(data,data$state)
s
str(s)
s[[1]]
state_list <-split(data,data$state)
sapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(c(NA,x$state[1]))
} else {
return(c(as.character(x[num,'hospital.name'],x$state[1])))
}
})
num=3
sapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(c(NA,x$state[1]))
} else {
return(c(as.character(x[num,'hospital.name'],x$state[1])))
}
})
ss= sapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(c(NA,x$state[1]))
} else {
return(c(as.character(x[num,'hospital.name'],x$state[1])))
}
})
ss
str(ss)
class(ss)
ss[1]
names(ss)
sapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(list(NA,x$state[1]))
} else {
return(list(as.character(x[num,'hospital.name'],x$state[1])))
}
})
x$state[1]
x=state_list$AK
x
x$state[1]
lapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(list(NA,x$state[1]))
} else {
return(list(as.character(x[num,'hospital.name'],x$state[1])))
}
})
lapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(c(NA,x$state[1]))
} else {
return(c(as.character(x[num,'hospital.name']),x$state[1]))
}
})
sapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(c(NA,x$state[1]))
} else {
return(c(as.character(x[num,'hospital.name']),x$state[1]))
}
})
result<-sapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(c(NA,x$state[1]))
} else {
return(c(as.character(x[num,'hospital.name']),x$state[1]))
}
})
t(result)
result<-t(result)
class(result)
result<-as.data.frame(result)
result
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
names(data) <- tolower(names(data))
valid_outcomes <- c('heart attack','heart failure','pneumonia')
# check if arguments are valid
if (!(outcome %in% valid_outcomes)) {stop('invalid outcome')}
# outcome character to match data's column names
column <- paste('hospital.30.day.death..mortality..rates.from.',gsub('[ ]','.',outcome),sep='')
data <- data[ ,c('state','hospital.name',column) ]
# character to numeric
suppressWarnings( data[,column] <- as.numeric(data[,column]) )
# order by state, hospital name
data <- data[order(data$state,data$hospital.name),]
state_list <-split(data,data$state)
result<-sapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
x<- x[order(x[,column])]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(c(NA,x$state[1]))
} else {
return(c(as.character(x[num,'hospital.name']),x$state[1]))
}
})
result<-t(result)
result<-as.data.frame(result)
names(result)<-c('hospital','state')
return(result)
}
rankall("heart attack", 20)
rankall("heart attack", 20)
outcome
num
num=20
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
names(data) <- tolower(names(data))
valid_outcomes <- c('heart attack','heart failure','pneumonia')
# check if arguments are valid
if (!(outcome %in% valid_outcomes)) {stop('invalid outcome')}
# outcome character to match data's column names
column <- paste('hospital.30.day.death..mortality..rates.from.',gsub('[ ]','.',outcome),sep='')
data <- data[ ,c('state','hospital.name',column) ]
# character to numeric
suppressWarnings( data[,column] <- as.numeric(data[,column]) )
# order by state, hospital name
data <- data[order(data$state,data$hospital.name),]
state_list <-split(data,data$state)
state_list[[1]]
result<-sapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
x<- x[order(x[,column])]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(c(NA,x$state[1]))
} else {
return(c(as.character(x[num,'hospital.name']),x$state[1]))
}
})
column
state_list[[1]]
sapply(state_list,print)
sapply(state_list,class)
sapply(state_list,names)
column
x=state_list[[1]]
x<- x[!is.na(x[,column]), ]
x<- x[order(x[,column])]
x
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
names(data) <- tolower(names(data))
valid_outcomes <- c('heart attack','heart failure','pneumonia')
# check if arguments are valid
if (!(outcome %in% valid_outcomes)) {stop('invalid outcome')}
# outcome character to match data's column names
column <- paste('hospital.30.day.death..mortality..rates.from.',gsub('[ ]','.',outcome),sep='')
data <- data[ ,c('state','hospital.name',column) ]
# character to numeric
suppressWarnings( data[,column] <- as.numeric(data[,column]) )
# order by state, hospital name
data <- data[order(data$state,data$hospital.name),]
state_list <-split(data,data$state)
result<-sapply(state_list,function(x){
x<- x[!is.na(x[,column]), ]
x<- x[order(x[,column]),]
# figure the rank
if (num=='best') num=1
if (num=='worst') num=nrow(x)
if ( !(num %in% c('best','worst')) & !is.numeric(num) ) stop('invalid num')
if (num>nrow(data)){
return(c(NA,x$state[1]))
} else {
return(c(as.character(x[num,'hospital.name']),x$state[1]))
}
})
result<-t(result)
result<-as.data.frame(result)
names(result)<-c('hospital','state')
return(result)
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source('rprog-scripts-submitscript3.R')
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
